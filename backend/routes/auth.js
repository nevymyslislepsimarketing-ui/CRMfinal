const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const pool = require('../config/database');

const router = express.Router();

// Registrace nov√©ho u≈æivatele
router.post('/register', async (req, res) => {
  const { name, email, password, role = 'employee', position } = req.body;

  try {
    console.log('üìù Pokus o registraci u≈æivatele:', email);
    
    // Validace
    if (!name || !email || !password) {
      console.log('‚ùå Validace selhala - chyb√≠ povinn√° pole');
      return res.status(400).json({ error: 'V≈°echna pole jsou povinn√°' });
    }

    // Kontrola JWT_SECRET
    if (!process.env.JWT_SECRET) {
      console.error('‚ùå JWT_SECRET nen√≠ nastaven√Ω v .env souboru!');
      return res.status(500).json({ error: 'Chyba konfigurace serveru - JWT_SECRET' });
    }

    // Kontrola existence u≈æivatele
    console.log('üîç Kontrola existence u≈æivatele...');
    const existingUser = await pool.query(
      'SELECT * FROM users WHERE email = $1',
      [email]
    );

    if (existingUser.rows.length > 0) {
      console.log('‚ùå U≈æivatel ji≈æ existuje');
      return res.status(400).json({ error: 'U≈æivatel s t√≠mto emailem ji≈æ existuje' });
    }

    // Hashov√°n√≠ hesla
    console.log('üîê Hashov√°n√≠ hesla...');
    const hashedPassword = await bcrypt.hash(password, 10);

    // Vytvo≈ôen√≠ u≈æivatele s vynucenou zmƒõnou hesla
    console.log('üíæ Ukl√°d√°n√≠ u≈æivatele do datab√°ze...');
    const result = await pool.query(
      'INSERT INTO users (name, email, password_hash, role, position, force_password_change) VALUES ($1, $2, $3, $4, $5, TRUE) RETURNING id, name, email, role, position',
      [name, email, hashedPassword, role, position || null]
    );

    const user = result.rows[0];
    console.log('‚úÖ U≈æivatel vytvo≈ôen:', user.id);
    console.log('‚ö†Ô∏è  U≈æivatel bude muset zmƒõnit heslo p≈ôi prvn√≠m p≈ôihl√°≈°en√≠');

    res.status(201).json({
      message: 'U≈æivatel √∫spƒõ≈°nƒõ vytvo≈ôen. Prvn√≠ p≈ôihl√°≈°en√≠ vy≈æaduje zmƒõnu hesla.',
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        initialPassword: password // Heslo kter√© admin zadal
      }
    });
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi registraci:', error.message);
    console.error('Stack:', error.stack);
    
    // Specifick√© chyby datab√°ze
    if (error.code === '42P01') {
      return res.status(500).json({ 
        error: 'Datab√°zov√° tabulka neexistuje. Spus≈•te: npm run init-db' 
      });
    }
    
    if (error.code === 'ECONNREFUSED') {
      return res.status(500).json({ 
        error: 'Nelze se p≈ôipojit k datab√°zi. Zkontrolujte, zda bƒõ≈æ√≠ PostgreSQL.' 
      });
    }
    
    res.status(500).json({ 
      error: 'Chyba serveru p≈ôi registraci',
      detail: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// P≈ôihl√°≈°en√≠ u≈æivatele
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    console.log('üîë Pokus o p≈ôihl√°≈°en√≠ u≈æivatele:', email);
    
    // Validace
    if (!email || !password) {
      console.log('‚ùå Validace selhala - chyb√≠ email nebo heslo');
      return res.status(400).json({ error: 'Email a heslo jsou povinn√©' });
    }

    // Kontrola JWT_SECRET
    if (!process.env.JWT_SECRET) {
      console.error('‚ùå JWT_SECRET nen√≠ nastaven√Ω v .env souboru!');
      return res.status(500).json({ error: 'Chyba konfigurace serveru - JWT_SECRET' });
    }

    // Nalezen√≠ u≈æivatele
    console.log('üîç Hled√°n√≠ u≈æivatele v datab√°zi...');
    const result = await pool.query(
      'SELECT * FROM users WHERE email = $1',
      [email]
    );

    if (result.rows.length === 0) {
      console.log('‚ùå U≈æivatel nenalezen');
      return res.status(401).json({ error: 'Neplatn√© p≈ôihla≈°ovac√≠ √∫daje' });
    }

    const user = result.rows[0];
    console.log('‚úÖ U≈æivatel nalezen:', user.id);

    // Ovƒõ≈ôen√≠ hesla
    console.log('üîê Ovƒõ≈ôov√°n√≠ hesla...');
    const isValidPassword = await bcrypt.compare(password, user.password_hash);

    if (!isValidPassword) {
      console.log('‚ùå Neplatn√© heslo');
      return res.status(401).json({ error: 'Neplatn√© p≈ôihla≈°ovac√≠ √∫daje' });
    }

    console.log('‚úÖ Heslo ovƒõ≈ôeno');

    // Kontrola force_password_change
    if (user.force_password_change) {
      console.log('‚ö†Ô∏è  Nutn√° zmƒõna hesla');
      
      // Vytvo≈ôen√≠ doƒçasn√©ho tokenu pro zmƒõnu hesla (krat≈°√≠ platnost)
      const tempToken = jwt.sign(
        { id: user.id, email: user.email, role: user.role, temp: true },
        process.env.JWT_SECRET,
        { expiresIn: '30m' }
      );

      return res.json({
        requirePasswordChange: true,
        tempToken,
        user: {
          id: user.id,
          name: user.name,
          email: user.email
        }
      });
    }

    // Vytvo≈ôen√≠ JWT tokenu
    console.log('üé´ Generov√°n√≠ JWT tokenu...');
    const token = jwt.sign(
      { id: user.id, email: user.email, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );

    console.log('‚úÖ P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©');
    res.json({
      message: 'P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©',
      token,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role
      }
    });
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi p≈ôihl√°≈°en√≠:', error.message);
    console.error('Stack:', error.stack);
    
    // Specifick√© chyby datab√°ze
    if (error.code === '42P01') {
      return res.status(500).json({ 
        error: 'Datab√°zov√° tabulka neexistuje. Spus≈•te: npm run init-db' 
      });
    }
    
    if (error.code === 'ECONNREFUSED') {
      return res.status(500).json({ 
        error: 'Nelze se p≈ôipojit k datab√°zi. Zkontrolujte, zda bƒõ≈æ√≠ PostgreSQL.' 
      });
    }
    
    res.status(500).json({ 
      error: 'Chyba serveru p≈ôi p≈ôihl√°≈°en√≠',
      detail: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Zmƒõna hesla (prvn√≠ p≈ôihl√°≈°en√≠ nebo reset)
router.post('/change-password', async (req, res) => {
  const { newPassword } = req.body;
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Token nen√≠ poskytnut' });
  }

  try {
    console.log('üîê Zmƒõna hesla...');

    // Ovƒõ≈ôen√≠ tokenu
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // Validace nov√©ho hesla
    if (!newPassword || newPassword.length < 8) {
      return res.status(400).json({ 
        error: 'Heslo mus√≠ m√≠t alespo≈à 8 znak≈Ø' 
      });
    }

    // Hashov√°n√≠ nov√©ho hesla
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // Aktualizace hesla a odstranƒõn√≠ force_password_change
    await pool.query(
      'UPDATE users SET password_hash = $1, force_password_change = FALSE, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
      [hashedPassword, decoded.id]
    );

    console.log('‚úÖ Heslo zmƒõnƒõno pro u≈æivatele:', decoded.id);

    // Vytvo≈ôen√≠ nov√©ho plnohodnotn√©ho tokenu
    const newToken = jwt.sign(
      { id: decoded.id, email: decoded.email, role: decoded.role },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );

    // Z√≠sk√°n√≠ aktu√°ln√≠ch dat u≈æivatele
    const userResult = await pool.query(
      'SELECT id, name, email, role FROM users WHERE id = $1',
      [decoded.id]
    );

    res.json({
      message: 'Heslo √∫spƒõ≈°nƒõ zmƒõnƒõno',
      token: newToken,
      user: userResult.rows[0]
    });
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi zmƒõnƒõ hesla:', error);
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({ error: 'Neplatn√Ω token' });
    }
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ error: 'Token vypr≈°el. P≈ôihlaste se znovu.' });
    }
    res.status(500).json({ error: 'Chyba serveru p≈ôi zmƒõnƒõ hesla' });
  }
});

// Z√≠sk√°n√≠ informac√≠ o aktu√°ln√≠m u≈æivateli
router.get('/me', async (req, res) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Token nen√≠ poskytnut' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const result = await pool.query(
      'SELECT id, name, email, role, created_at FROM users WHERE id = $1',
      [decoded.id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'U≈æivatel nenalezen' });
    }

    res.json({ user: result.rows[0] });
  } catch (error) {
    console.error('Chyba p≈ôi z√≠sk√°v√°n√≠ u≈æivatele:', error);
    res.status(401).json({ error: 'Neplatn√Ω token' });
  }
});

module.exports = router;
