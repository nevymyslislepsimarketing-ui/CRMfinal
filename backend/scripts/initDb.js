const { Pool } = require('pg');
const bcrypt = require('bcryptjs');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

const initDatabase = async () => {
  try {
    console.log('üöÄ Inicializace datab√°ze...');

    // Smaz√°n√≠ star√Ωch tabulek (pokud existuj√≠)
    console.log('üóëÔ∏è  Maz√°n√≠ star√Ωch tabulek...');
    await pool.query('DROP TABLE IF EXISTS invoices CASCADE');
    await pool.query('DROP TABLE IF EXISTS recurring_tasks CASCADE');
    await pool.query('DROP TABLE IF EXISTS tasks CASCADE');
    await pool.query('DROP TABLE IF EXISTS task_types CASCADE');
    await pool.query('DROP TABLE IF EXISTS pipeline CASCADE');
    await pool.query('DROP TABLE IF EXISTS clients CASCADE');
    await pool.query('DROP TABLE IF EXISTS users CASCADE');
    console.log('‚úÖ Star√© tabulky smaz√°ny');

    // Vytvo≈ôen√≠ tabulky users s roz≈°√≠≈ôen√Ωmi rolemi
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        role VARCHAR(50) DEFAULT 'employee',
        position VARCHAR(100),
        avatar_url TEXT,
        is_active BOOLEAN DEFAULT TRUE,
        force_password_change BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ Tabulka users vytvo≈ôena');

    // Vytvo≈ôen√≠ tabulky clients s fakturaƒçn√≠mi √∫daji
    await pool.query(`
      CREATE TABLE IF NOT EXISTS clients (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255),
        phone VARCHAR(50),
        status VARCHAR(50) DEFAULT 'active',
        notes TEXT,
        billing_company_name VARCHAR(255),
        ico VARCHAR(50),
        dic VARCHAR(50),
        billing_address TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ Tabulka clients vytvo≈ôena');

    // Vytvo≈ôen√≠ tabulky task_types (typy √∫kol≈Ø/aktivit)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS task_types (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        color VARCHAR(50) NOT NULL,
        icon VARCHAR(50),
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ Tabulka task_types vytvo≈ôena');

    // Vytvo≈ôen√≠ tabulky recurring_tasks (pravideln√© √∫koly) - MUS√ç B√ùT P≈òED tasks!
    await pool.query(`
      CREATE TABLE IF NOT EXISTS recurring_tasks (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        task_type_id INTEGER REFERENCES task_types(id) ON DELETE SET NULL,
        recurrence_pattern VARCHAR(50) NOT NULL,
        frequency INTEGER DEFAULT 1,
        start_date DATE NOT NULL,
        end_date DATE,
        priority VARCHAR(50) DEFAULT 'medium',
        client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
        assigned_to INTEGER REFERENCES users(id) ON DELETE SET NULL,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ Tabulka recurring_tasks vytvo≈ôena');

    // Vytvo≈ôen√≠ tabulky tasks s roz≈°√≠≈ôen√Ωmi funkcemi (PO recurring_tasks!)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS tasks (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        deadline DATE,
        start_time TIMESTAMP,
        end_time TIMESTAMP,
        priority VARCHAR(50) DEFAULT 'medium',
        status VARCHAR(50) DEFAULT 'pending',
        client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
        assigned_to INTEGER REFERENCES users(id) ON DELETE SET NULL,
        task_type_id INTEGER REFERENCES task_types(id) ON DELETE SET NULL,
        recurring_task_id INTEGER REFERENCES recurring_tasks(id) ON DELETE CASCADE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ Tabulka tasks vytvo≈ôena');

    // Vytvo≈ôen√≠ tabulky pipeline (leady a potenci√°ln√≠ klienti)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS pipeline (
        id SERIAL PRIMARY KEY,
        company_name VARCHAR(255) NOT NULL,
        contact_person VARCHAR(255),
        email VARCHAR(255),
        phone VARCHAR(50),
        stage VARCHAR(50) DEFAULT 'lead',
        value DECIMAL(10, 2),
        probability INTEGER DEFAULT 0,
        source VARCHAR(100),
        notes TEXT,
        next_action TEXT,
        next_action_date DATE,
        assigned_to INTEGER REFERENCES users(id) ON DELETE SET NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ Tabulka pipeline vytvo≈ôena');

    // Vytvo≈ôen√≠ tabulky company_settings (fakturaƒçn√≠ √∫daje firmy)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS company_settings (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        company_name VARCHAR(255) NOT NULL,
        ico VARCHAR(50),
        dic VARCHAR(50),
        address TEXT,
        bank_account VARCHAR(100),
        email VARCHAR(255),
        phone VARCHAR(50),
        logo_url TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id)
      );
    `);
    console.log('‚úÖ Tabulka company_settings vytvo≈ôena');

    // Vytvo≈ôen√≠ pivot tabulky pro viditelnost klient≈Ø
    await pool.query(`
      CREATE TABLE IF NOT EXISTS client_users (
        id SERIAL PRIMARY KEY,
        client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(client_id, user_id)
      );
    `);
    console.log('‚úÖ Tabulka client_users vytvo≈ôena');

    // Vytvo≈ôen√≠ tabulky invoices s roz≈°√≠≈ôen√Ωmi √∫daji
    await pool.query(`
      CREATE TABLE IF NOT EXISTS invoices (
        id SERIAL PRIMARY KEY,
        invoice_number VARCHAR(100) UNIQUE NOT NULL,
        client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
        created_by INTEGER REFERENCES users(id) ON DELETE SET NULL,
        amount DECIMAL(10, 2) NOT NULL,
        description TEXT,
        issued_at DATE NOT NULL,
        due_date DATE NOT NULL,
        paid BOOLEAN DEFAULT FALSE,
        payment_date DATE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ Tabulka invoices vytvo≈ôena');

    // Vytvo≈ôen√≠ tabulky pro reset hesla tokeny
    await pool.query(`
      CREATE TABLE IF NOT EXISTS password_resets (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        token VARCHAR(255) UNIQUE NOT NULL,
        expires_at TIMESTAMP NOT NULL,
        used BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ Tabulka password_resets vytvo≈ôena');

    // Vytvo≈ôen√≠ prvn√≠ho admin u≈æivatele s doƒçasn√Ωm heslem
    const initialPassword = 'Nevymyslis2025!';
    const hashedPassword = await bcrypt.hash(initialPassword, 10);
    await pool.query(`
      INSERT INTO users (name, email, password_hash, role, position, force_password_change)
      VALUES 
        ('Admin', 'info@nevymyslis.cz', $1, 'manager', 'Administr√°tor', TRUE)
      ON CONFLICT (email) DO NOTHING;
    `, [hashedPassword]);
    console.log('‚úÖ Admin u≈æivatel vytvo≈ôen');
    console.log('üìß Email: info@nevymyslis.cz');
    console.log('üîë Heslo: ' + initialPassword);
    console.log('‚ö†Ô∏è  Heslo bude nutn√© zmƒõnit p≈ôi prvn√≠m p≈ôihl√°≈°en√≠!');

    // Vytvo≈ôen√≠ z√°kladn√≠ch typ≈Ø √∫kol≈Ø
    await pool.query(`
      INSERT INTO task_types (name, color, icon, description)
      VALUES 
        ('Obchodn√≠ sch≈Øzka', '#C8B6FF', 'ü§ù', 'Sch≈Øzka s klientem nebo potenci√°ln√≠m klientem'),
        ('Nat√°ƒçen√≠', '#FFD6BA', 'üé•', 'Nat√°ƒçen√≠ video obsahu'),
        ('Tvorba grafiky', '#FF6B9D', 'üé®', 'Grafick√Ω design a vizu√°ly'),
        ('Tvorba webu', '#4ECDC4', 'üíª', 'V√Ωvoj a √∫prava webov√Ωch str√°nek'),
        ('Spr√°va reklam', '#FFE66D', 'üìä', 'Spr√°va reklamn√≠ch kampan√≠'),
        ('Vyd√°v√°n√≠ contentu', '#95E1D3', 'üì±', 'Publikov√°n√≠ obsahu na soci√°ln√≠ s√≠tƒõ'),
        ('Konzultace', '#A8E6CF', 'üí¨', 'Poradenstv√≠ a konzultace'),
        ('Fotografie', '#FFA07A', 'üì∏', 'Fotografov√°n√≠ produkt≈Ø nebo event≈Ø')
      ON CONFLICT DO NOTHING;
    `);
    console.log('‚úÖ Typy √∫kol≈Ø vytvo≈ôeny');

    console.log('üéâ Datab√°ze √∫spƒõ≈°nƒõ inicializov√°na!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi inicializaci datab√°ze:', error);
    process.exit(1);
  }
};

initDatabase();
